基础：
变量和常量


声明变量和常量：
var myVariable = 42 //定义变量
myVariable = 50 // 改变myVariable值
let myConstant = 42 //定义常量

也可以使用在一行内用逗号分隔定义：
var x = 0.0, y = 0.0, z = 0.0


类型注释：
let explicitDouble: Double = 70 // 显示定义
var messageStr: String //定一个类型为String的变量
var red, green, blue: Double //同时定义多个变量为同一类型Double型


打印常量和变量：
例如：
print("The current value of friendlyWelcome is \(friendlyWelcome)")


注释：
// this is a comment
/* this is also a comment.
but written over multiple lines*/


分号：
对于Swift来说分号是可以省略的。
但是对于在同一行的多个语句来说，分号是必须的。


整型类型
整型(Int)，无符号整型(UInt)，浮点类型


类型安全和类型引用
Swift是类型安全语言。
如果你的代码是String类型，那么你不能赋值一个Int值。


数字形式
一个整型数字能够写成不同的形式：
.十进制
.二进制
.八进制
.十六进制


let paddedDouble = 000123.456
let oneMillion = 1_000_000
let justOverOneMillion = 1_000_000.000_000_1


整型和浮点类型转换
let integerPi = Int(pi)
let pi = Double(three) + pointOneFourOneFiveNine


类型别称（Type Aliases）
使用关键字typealias来定义一个已存在类型的别名。
typealias AudioSample = UInt16
var maxAmplitudeFound = AudioSample.min


布尓值（boolean）
let orangesAreOrange = true
let turnipsAreDelicious = false


元组（Tuples）
元组就是其中包含多个值。
比如：(404, "Not Found")就是一个元组，用来描述HTTP状态码。
let http404Error = (404, "Not Found")
包含了一个Int和String类型值。

let (statusCode, statusMessage) = http404Error
print("The status code is \(statusCode)")
// prints "The status code is 404"
print("The status message is \(statusMessage)")
// prints "The status message is Not Found 

如果你仅需要元组中的某个值，可以这样定义：
let (justTheStatusCode, _) = http404Error
print("The status code is \(justTheStatusCode)")
// prints "The status code is 404

初始化元组示例：
let http200Status = (statusCode: 200, description: "OK")


可选项（Optionals）
let optionalInt: Int? = 9 //定义可选变量为特殊的值:nil
optionalInt = nil

var surveyAnswer: String? //变量自动赋值为nil

optionals能够用于有些情况，比如从String类型转换到Int类型,但是不是每个String都能够被转换成整型。
比如，“123”可以装换成123，但是"hello"就不能够明显的被装换成整型。

let possibleNumber = "123"
let convertedNumber = Int(possibleNumber)
这个例子返回的是一个可选项(optional)整型，而不是一个整型。
可选项（optional）整型被写成Int?,而不是Int,?表明这个值有可以是optional，意味着它包含了某个整型值，或者是没有值。

注意：
在Swift中的nil和Objective-C中的nil是不一样的。在Objective-C中，nil是一个指向不存在的对象的指针。
在Swift中，nil不是一个指针－－它是代表某个没有值的类型。任何可选项类型都可以被赋值为nil，不仅仅是对象类型。


强制解析(Forced Unwrapping)
使用！来读取可选项值，如果用！来读取不存在的可选项值会触发运行错误。一定要保证在使用！来强制解析非nil的值。


选项绑定（optional binding）
if let firstNumber = Int("4"), secondNumber = Int("42") where firstNumber < secondNumber {
    print("\(firstNumber) < \(secondNumber)")
}


隐式解析选项（Implicitly Unwrapped Optionals）
有些选项值一直都是有值的，对你来说这些值都是安全的，所以在使用的时候没有必要时刻去检查。
像这样子的选项值被称为隐式选项值。
写法：String!（不是String?）

let possibleString: String? = "An optional string."
let forcedString: String = possibleString! // requires an exclamation mark
 
let assumedString: String! = "An implicitly unwrapped optional string."
let implicitString: String = assumedString // no need for an exclamation mark


注意：
如果你的隐式解析选项是nil的话，当你要试图访问它的值的时候，会触发运行时的错误。
这个结果和你使用！来解析一个不包含可选项值的时候结果一样。

注意：
当这个变量有可能变为nil的时候，请不要使用隐式解析选项。如果你需要检查一个变量在生命周期内是否为nil，一般情况下会使用一个正常的可选项（optional）类型。


异常处理
示例1:
func canThrowAnError() throws {
    // this function may or may not throw an error
}

do {
    try canThrowAnError()
    // no error was thrown
} catch {
    // an error was thrown
}

示例2:
func makeASandwich() throws {
    // ...
}
 
do {
    try makeASandwich()
    eatASandwich()
} catch Error.OutOfCleanDishes {
    washDishes()
} catch Error.MissingIngredients(let ingredients) {
    buyGroceries(ingredients)
}


断言（Assertions）
可以调用Swift标准库中的全局方法断言：assert(_:_file:line:)

let age = -3
assert(age >= 0, "A person's age cannot be less than zero")

注意：
当你的代码需要优化的时候，断言会失效！比如你在Xcode中使用release配置去编译程序的时候。
以下有几种情况可以使用断言：
1.下标标示法的时候，用来检查下标值是否过高或者过低。
2.方法中传的值是否正确
3.当前可选项值是nil，但是需要个非nil的来执行之后的代码


























