扩展能够帮助已有类，结构体，枚举或者是协议类型添加新的方法。
扩展类似在Objective-C语言的categories。（不像Objective-C中的category，swift的扩展没有名字）

扩展在swift中有以下特性：
1.能够增加计算实例的属性和计算类型属性
2.定义实例方法和类型方法
3.提供新的初始化方法
4.定义subscripts
5.定义和使用新的内部类型
6.让一个现有类型实现某一协议

在swift中，可以扩展一个协议来提供所需要的额外的方法。
（注意：扩展能天假新方法给一个类型，但是它们不能够覆写现有的方法）

扩展语法：
 extension SomeType {
  // new functionality to add to SomeType goes here
 }

一个现有的扩展类型也可以符合一个或多个协议，
extension SomeType: SomeProtocol, AnotherProtocol {
  // implementation of protocol requirements goes here
}

注意：一旦你为某个现有类型定了扩展来增加新方法，新方法就能够在这个类型上的所有实例中获取，即使它们在声明扩展之前被定义。

计算属性：
extension Double {
  var km: Double {
    return self * 1_000.0
  }
  var m: Double {
    return self
  }
  var cm: Double {
    return self / 100.0
  }
  var mm: Double {
    return self / 1_000.0
  }
  var ft: Double {
    return self / 3.28084
  }
}

let oneInch = 25.4.mm
print("One inch is \(oneInch) meters") // One inch is 0.0254 meters
let threeFeet = 3.ft
print("Three feet is \(threeFeet) meters")

注意：
扩展能够增加新的计算属性方法，但是不能添加保存属性或是属性观察器在现有已有的属性上。


初始化：
扩展能够添加新的初始化方法为现有的类型。也能够为类添加新的convenience构造器，但是不能添加新的designated构造器。
Designated initializers and deinitializers must always be provided by the original class implementation.

struct Size {
  var width = 0.0, height = 0.0
}

struct Point {
  var x = 0.0, y = 0.0
}

struct Rect {
  var origin = Point()
  var size   = Size()
}

let defaultRect = Rect()
let memberwiseRect = Rect(origin:Point(x:2.0,y:2.0), size:Size(width:5.0, height: 5.0))

可以扩展Rect结构体提供一个额外的初始化方法：
extension Rect {
  init(center: Point, size: Size) {
    let originX = center.x - (size.width / 2)
    let originY = center.y - (size.height / 2)
    self.init(origin: Point(x: originX, y: originY), size: size)
  }
}

新的初始化方法提供了一个基于中心点和size值的计算方法。
let centerRect = Rect(center: Point(x: 4.0, y: 4.0), size: Size(width: 3.0, height: 3.0))

注意⚠️：如果你用扩展提供了新的初始化方法，你仍然需要保证当初始化工作完成时候每一个实例都要被完全的初始化。

方法：
扩展能够添加实例饿方法和现有类型的类型方法。
extension Int {
  func repetitions(task:() -> Void) {
    for _ in 0..<self {
      task()
    }
  }
}

3.repetitions({ print("Hello!") })
// Hello!
// Hello!
// Hello!


变异的实例方法（Mutating Instance Methods）:
一个扩展添加的实例方法能够修改实例自己，结构题和枚举方法修改自身或是它的属性必须要标记实例方法为mutating，
就像变异方法从原有那里实现过来的。

extension Int {
  mutating func square() {
    self = self * self
  }
}
var someInt = 3
someInt.square()
// someInt is now 9

Subscripts(下标)
扩展能够添加新的下标给现有的类型。

extension Int {
  subscript(digitIndex: Int) -> Int {
    var decimalBase = 1
    for _ in 0..<digitIndex {
      decimalBase *= 10
    }
    return (self / decimalBase) % 10
  }
}

746381295[0] // return 5
746381295[1] // return 9
746381295[2] // return 2
746381295[8] // return 7

如果超过了数值的范围，就会返回0
746381295[9] // return 0

Nested Types(内部类型)：
扩展能够为类，结构体和枚举天假内部类型：
extension Int {
  enum Kind {
    case Negative, Zero, Positive
  }
  var Kind: Kind {
    switch self {
      case 0:
        return .Zero
      case let x where x > 0:
        return .Positive
      default:
        return .Negative
    }
  }
}

func printIntegerKinds(numbers: [Int]) {
  for number in numbers {
    switch number.kind {
      case .Negative:
        print("-", terminator:"")
      case .Zero:
        print("0 ", terminator:"")
      case .Positive:
        print("+ ", terminator:"")
    }
  }
  print("")
}

printIntegerKinds([3, 19, -27, 0, -6, 0]) // Prints "+ + - 0 - 0"

注意⚠️：
number.kind已是Int.Kind类型。因此，所有的Int.Kind情况能够在switch中用简洁形式去表达，
像.Negative而不是Int.Kind.Negative.



















