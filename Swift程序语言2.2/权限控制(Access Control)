权限控制能够约束你的代码，这个特性能够让你隐藏代码的细节，开放特定的接口以供使用。
可以对类，结构体和枚举类型进行约束，同样的对于属性，方法，构造器和subscripts。

Swift的权限控制基于模块和源文件的概念。
（模块是一个块代码分布－－一个框架或者应用程序被编译了并且能够使用import关键字被其他模块使用。）
（源文件是一个简单的在模块中的swift源代码，尽管它在独立的文件中定义私有类型，一段源文件包涵定义了多个类型，方法等等）

权限等级（Access Levels）
swift提供了三种权限等级。
1.public
2.Internal
3.private


权限使用方法：
1.public变量不能定义已经有internal或是private类型，因为这个类型或许不能在任何地方使用。
2.方法不能有比它的参数或是返回值更高的权限，因为方法中的指定类型不能够被访问当使用方法的时候。

默认权限
一般在你代码中的所有实体都有默认权限internal，一般情况你不必特殊声明权限。

权限控制语法
public class SomePublicClass {}
internal class SomeInternalClass {}
private class SomePrivateClass {

public var somePublicVariable = 0
internal let someInternalConstant = 0
private func somePrivateFunction() {}

除非有特殊声明，默认权限是internal。

class SomeInternalClass {} // implicityly
let someInternalConstant = 0 // implicityly


public class SomePublicClass {          // explicitly public class
    public var somePublicProperty = 0    // explicitly public class member
    var someInternalProperty = 0         // implicitly internal class member
    private func somePrivateMethod() {}  // explicitly private class member
}

class SomeInternalClass {               // implicitly internal class
var someInternalProperty = 0         // implicitly internal class member
    private func somePrivateMethod() {}  // explicitly private class member
}

private class SomePrivateClass {        // explicitly private class
    var somePrivateProperty = 0          // implicitly private class member
    func somePrivateMethod() {}          // implicitly private class member
}


原组类型
方法类型
枚举类型
Raw Values and Associated Values
内部类（nested types）
子类（Subclassing）

public class A {
    private func someMethod() {}
}
 
internal class B: A {
    override internal func someMethod() {}
}

public class A {
    private func someMethod() {}
}
 
internal class B: A {
    override internal func someMethod() {
        super.someMethod()
    }
}

因为父类a和子类b都定义在同一个源文件中，所以对于b可以用super.someMethod方法来调用someMethod。


常量，变量，属性和subscripts
private var privateInstance = SomePrivateClass()

struct TrackedString {
  private(set) var numberOfEdits = 0
  var value: String = "" {
    didSet {
      numberOfEdits += 1
    }
  }
}

var stringToEdit = TrackedString()
stringToEdit.value = "This string will be tracked."
stringToEdit.value += " This edit will increment numberOfEdits."
stringToEdit.value += " So will this one."
print("The number of edits is \(stringToEdit.numberOfEdits)")
// Prints "The number of edits is 3

你也可以设置显性的读取权限在getter和setter上。
public struct TrackedString {
    public private(set) var numberOfEdits = 0
    public var value: String = "" {
        didSet {
            numberOfEdits += 1
        }
    }
    public init() {}
}

初始化构造器
默认构造器

协议（protocols）
扩展（extensions）
泛型（Generics）
别名（Type Aliases）






