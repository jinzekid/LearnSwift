Swift支持大部分的标准C操作符并且改进了一些能力涌来消除一般代码所带来的错误。
Swift提供了两个范围操作符（a..<b和a...b）。

语法
操作符有一元，二元或者是三元操作符。
一元有：i++,--i,!b

二元有：2 + 3,4 - 5

三元有：a ? b : c

赋值操作符
let b = 10
var a = 5
a = b 


if x = y {
    // this is not valid, because x = y does not return a value
}


算术操作符
+,-,*,/

也支持String操作，比如：
"hello, " + "world"


取余操作符（Remainder Operator）
a % b
9 % 4    // equals 1
a = (b x some multiplier) + remainder


浮点数的取余计算
8 ％ 2.5 ＝ 0.5


自增自减操作符
var i = 0
++i


var a = 0
let b = ++a
// a and b are now both equal to 1
let c = a++
// a is now equal to 2, but c has been set to the pre-increment value of 1


Swift也像C一样，支持复合赋值操作
var a = 1
a += 2


Swift支持所有的标准C比较符
Equal to (a == b)
Not equal to (a != b)
Greater than (a > b)
Less than (a < b)
Greater than or equal to (a >= b)
Less than or equal to (a <= b)


三元操作符
question ? answer1 : answer2


nil合并操作符(Nil Coalescing Operator)
a ?? b:拆解一个可选项(optional)a，如果a为nil，那么返回值就是b
nil合并操作符等价于：
a != nil ? a! : b

let defaultColorName = "red"
var userDefinedColorName: String?   // defaults to nil
 
var colorNameToUse = userDefinedColorName ?? defaultColorName
// userDefinedColorName is nil, so colorNameToUse is set to the default of "red"

userDefinedColorName = "green"
colorNameToUse = userDefinedColorName ?? defaultColorName
// userDefinedColorName is not nil, so colorNameToUse is set to "green"


范围操作符
闭区间的操作符
for index in 1...5 {
  print("\(index) times 5 is \(index * 5)")
}

半开区间操作符
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
for i in 0..<count {
    print("Person \(i + 1) is called \(names[i])")
}
// Person 1 is called Anna
// Person 2 is called Alex
// Person 3 is called Brian
// Person 4 is called Jack


逻辑操作符
Logical NOT (!a)
Logical AND (a && b)
Logical OR (a || b)

































