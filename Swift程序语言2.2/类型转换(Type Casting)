在swift中使用is和as操作符来进行类型转换。
这两个操作符提供了简单的和富有表达的方式检查值的类型或者是转换成不同的类型。

你也可以使用类型转换来检查这类型是否支持某一协议。

为类型转换定义类层的层级关系
实例：
class MediaItem {
  var name: String
  init(name: String) {
    self.name = name
  }
}

子类：
class Movie: MediaItem {
  var director: String
  init(name: String, director: String) {
    self.director = director
    super.init(name: name)
  }
}

class Song: MediaItem {
  var artist: String
  init(name: String, atrist: String) {
    self.artist = artist
    super.init(name: name)
  }
}

let library = [Movie(name: "Casablanca", director:"Michael Curtiz"),
              Song(name: "Blue Suede Shoes", atrist: "Elvis Presley"]
              

类型检测
使用is关键词检查是否是某一类型的实例。类型检测返回true或者是false。
示例：
var movieCount = 0
var songCount = 0

for item in library {
  if item is Movie {
    movieCount += 1
  } else if item is Song {
    songCount += 1
  }
}
              
print("Media library contains \(movieCount) movies and \(songCount) songs")

向下转型
使用as？或者as!
as?返回一个optional值
as!返回一个强制未包装的解析结果

使用条件语句当你不确定downcast的时候是否未nil
for item in library {
  if let movie = item as? Movie {
    print("Movie:\(movie.name) , dir.\(movie.director)")
  }
  else if let song = item as? Song {
    print("Song:\(song.name), by \(song.artist)")
  }
}

Any和AnyObject的类型转换
AnyObject:能够代表任何类的实例
Any:能代表任何类型的实例，包括方法类型

AnyObject:
let someObject: [AnyObject] = [Movie(name:"2001: A Spacee Odyssey", director:"Stanley Kubrick"),
                              Movie(name:"Moon", director: "Duncan Jones")]
                              
以下是两种遍历方式：
for object in someObjects {
  let movie = object as! Movie
  print("Movie: \(movie.name), dir. \(movie.director)")
}

for movie in someObjects as! [Movie] {
  print("Movie: \(movie.name), dir. \(movie.director)")
}

Any:
var things = [Any]()
things.append(0)
things.append(0.0)
things.append(42)
things.append("hello")
things.append((3.0, 5.0))
things.append(Movie(name:"Ghostbusters", director:"Ivan Reitman"))
things.append({(name: String) -> String in "Hello, \(name)"})

for thing in things {
  switch thing {
    case 0 as Int:
      print("zero as an Int")
    case 0 as Double:
      print("zero as a Double")
    case let someInt as Int:
      print("an integer value of \(someInt)")
    case let someDouble as Double where someDouble > 0:
      print("a positive double value of \(someDouble)")
    case let (x, y) as (Double, Double):
      print("an (x,y) point at \(x), \(y)")
    case let movie as Movie:
      print("a movie called \(movie.name), dir.\(movie.director)")
    case let stringConverter as String -> String:
      print(stringConverter("Michael"))
    defalut:
      print("something else")
  }
}
