概要：本片讨论弱引用的概念，包括其它语言中的各种设置，在标准库中提议一些新核心语言特性和更加高级的运行时（runtime）特性。

建议概述：
1.有些需要反向引用（back reference）到对象，这些引用必须设计的对于新手来说很方便使用。
2.这里有些更多的高级用例，例如需要通知或者存储单元分配时的中断；这些都被用于更高级的抽象继承比如弱缓存。
这就需要更多的专业知识，像强大和灵活性应该优先于易用性。

第二点使用用例应该通过在基本的运行时（runtime）基础上的库类型用到。

第一点使用用例更多的需要语言上的支持。为此，作者提议了2个变量属性，@weak和@unowned。
作者同样提议一块小石板的新功能，捕获一个在闭包中的有问题并且带有强引用的值。

所推荐的变量属性
在接下里的讨论中，"变量的"声明是将一个名称绑定到任意类型 (可能是可变的) 值的任何声明。
目前只是var，但是这建议同样添加捕获，并且之后我们会添加更多的变体，像是const或val这样的。


@weak
weak是这样一个属性，能够被用在任何类型T变量的声明。为了类型系统的目的，像是一个普通类型Optional<T>的变量，期望：
.它不维护1的引用计数不变并且
.在当前引用（如果存在）已经开始破坏其结果就是一个Nothing值时变量开始加载

这个语义类似与其它环境的弱引用（尤其是Objective-C），除了在正式的类型变化迫使在使用前检查它的值。

编译器将如何找到类型可选<T>并不是真正的问题;更多的像是编译器＋内核魔法。
